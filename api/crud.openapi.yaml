openapi: 3.1.0
info:
  title: 가져가구 API
  version: 1.0.0
  summary: 회원/라이더 분리 로그인, 소셜 로그인, 가구 조회·찜, 장바구니/결제/주문, 알림, 제품 등록, AI 유사 스타일 추천을 포함한 REST API.
  description: |
    프론트엔드(웹/앱)와 백엔드 간 통신을 표준화하기 위한 OpenAPI 스키마입니다. 
    JWT Bearer 인증을 기본으로 하며, 회원(이용자)과 라이더 계정을 분리합니다.
servers:
  - url: https://api.example.com
    description: Production
  - url: http://localhost:4000
    description: Local Dev
security:
  - bearerAuth: []

tags:
  - name: Auth (Users)
    description: 이용자 계정 인증
  - name: Auth (Riders)
    description: 라이더 계정 인증
  - name: Social Auth
    description: 구글/카카오 소셜 로그인
  - name: Users
  - name: Riders
  - name: Categories
  - name: Products
  - name: Wishlist
  - name: Cart
  - name: Shipping
  - name: Checkout & Orders
  - name: Payments
  - name: Notifications
  - name: Uploads
  - name: AI

paths:
  /health:
    get:
      summary: 헬스체크
      operationId: health
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok

  # ========================
  # Auth - Users (이용자)
  # ========================
  /auth/users/signup:
    post:
      tags: [Auth (Users)]
      summary: 이용자 회원가입 (이메일/비밀번호)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
  /auth/users/login:
    post:
      tags: [Auth (Users)]
      summary: 이용자 로그인 (이메일/비밀번호)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ========================
  # Auth - Riders (라이더)
  # ========================
  /auth/riders/signup:
    post:
      tags: [Auth (Riders)]
      summary: 라이더 회원가입 (이메일/비밀번호)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  # ========================
  # Products
  # ========================
  /products:
    get:
      tags: [Products]
      summary: 가구 목록 조회 (필터/검색)
      parameters:
        - in: query
          name: q
          schema: { type: string, description: 검색어 }
        - in: query
          name: category_id
          schema: { type: string }
        - in: query
          name: price_min
          schema: { type: number }
        - in: query
          name: price_max
          schema: { type: number }
        - in: query
          name: sort
          schema:
            type: string
            enum: [recent, price_asc, price_desc, popular]
            default: recent
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: page_size
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProducts'
    post:
      tags: [Products]
      summary: 제품 등록 (판매자/이용자)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  # ========================
  # AI (유사 스타일 추천)
  # ========================
  /ai/style-match:
    post:
      tags: [AI]
      summary: 업로드한 이미지 기반 즉시 추천 (소규모)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIStyleMatchRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIStyleMatchResult'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    BadRequest:
      description: 잘못된 요청
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ApiError' }
    Unauthorized:
      description: 인증 실패
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ApiError' }

  schemas:
    ApiError:
      type: object
      properties:
        code: { type: string, example: BAD_REQUEST }
        message: { type: string, example: '유효하지 않은 파라미터입니다.' }
        details:
          type: object
          additionalProperties: true

    Tokens:
      type: object
      properties:
        token_type: { type: string, example: Bearer }
        access_token: { type: string }
        refresh_token: { type: string }
        expires_in: { type: integer, example: 3600 }

    AuthResponse:
      type: object
      properties:
        user: { $ref: '#/components/schemas/User' }
        tokens: { $ref: '#/components/schemas/Tokens' }

    SignupRequest:
      type: object
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 8 }
        name: { type: string }
        phone: { type: string }
      required: [email, password]

    LoginRequest:
      type: object
      properties:
        email: { type: string, format: email }
        password: { type: string }
      required: [email, password]

    User:
      type: object
      properties:
        id: { type: string }
        role: { type: string, enum: [user] }
        email: { type: string }
        name: { type: string }
        phone: { type: string }
        address: { $ref: '#/components/schemas/Address' }
        created_at: { type: string, format: date-time }

    Category:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        parent_id: { type: string, nullable: true }

    Product:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        description: { type: string }
        price: { $ref: '#/components/schemas/Money' }
        images:
          type: array
          items: { $ref: '#/components/schemas/Image' }
        category: { $ref: '#/components/schemas/Category' }
        seller_id: { type: string }
        location: { $ref: '#/components/schemas/Address' }
        attributes:
          type: object
          properties:
            material: { type: string }
            style: { type: string }
            color: { type: string }
            size: { type: string }
            condition: { type: string, enum: [new, like_new, good, fair, poor] }
            tags:
              type: array
              items: { type: string }
        stock: { type: integer, default: 1 }
        is_featured: { type: boolean, default: false }
        likes_count: { type: integer, default: 0 }
        created_at: { type: string, format: date-time }

    ProductCreate:
      type: object
      properties:
        title: { type: string }
        description: { type: string }
        price: { $ref: '#/components/schemas/Money' }
        category_id: { type: string }
        location: { $ref: '#/components/schemas/Address' }
        attributes:
          type: object
          properties:
            material: { type: string }
            style: { type: string }
            color: { type: string }
            size: { type: string }
            condition: { type: string }
            tags:
              type: array
              items: { type: string }
        image_file_ids:
          type: array
          items: { type: string }
      required: [title, price, category_id]

    Image:
      type: object
      properties:
        file_id: { type: string }
        url: { type: string, format: uri }
        width: { type: integer }
        height: { type: integer }

    PaginatedProducts:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/Product' }
        page: { type: integer }
        page_size: { type: integer }
        total: { type: integer }

    AIStyleMatchRequest:
      type: object
      properties:
        room_image_id: { type: string, description: 업로드된 방 사진 file_id }
        furniture_image_ids:
          type: array
          description: 선택적으로 특정 가구 이미지를 함께 업로드한 경우
          items: { type: string }
        top_k: { type: integer, default: 20 }
        filters:
          type: object
          properties:
            category_id: { type: string }
            price_min: { type: number }
            price_max: { type: number }
            style: { type: string }
      required: [room_image_id]

    AIMatch:
      type: object
      properties:
        product: { $ref: '#/components/schemas/Product' }
        score: { type: number, minimum: 0, maximum: 1 }

    AIStyleMatchResult:
      type: object
      properties:
        matches:
          type: array
          items: { $ref: '#/components/schemas/AIMatch' }
        generated_at: { type: string, format: date-time }

    Money:
      type: object
      properties:
        currency: { type: string, example: KRW }
        amount: { type: number, example: 129000 }

    Address:
      type: object
      properties:
        postcode: { type: string }
        line1: { type: string }
        line2: { type: string }
        city: { type: string }
        region: { type: string }
        country: { type: string, example: KR }
